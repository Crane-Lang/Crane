use std::io::print
use std::io::println

struct User {
    name: String,
    age: Uint64,
}

union Bool {
    True,
    False,
}

pub fn main() {
    let twenty_three = 23

    foo::do_foo()
    foo::bar::do_bar()

    std::io::print("twenty_three = ")
    std::io::println(std::int::int_to_string(twenty_three))
    std::io::println(" ")

    let greeting = "Hey"

    std::io::print("greeting = ")
    std::io::println(greeting)
    std::io::println(" ")

    greet("world")
    greet("trees")
    greet("everyone")
    std::io::println("")

    std::io::print("This value is always ")
    std::io::println(std::int::int_to_string(always_3()))
    std::io::println("")

    let also_always_3 = always_3()
    std::io::print("This value is also always ")
    std::io::println(std::int::int_to_string(also_always_3))
    std::io::println("")

    let ten = std::int::int_add(also_always_3, 7)
    std::io::print("This value should be 10: ")
    std::io::println(std::int::int_to_string(ten))
    std::io::println("")

    add_and_print(1, 1)
    add_and_print(2, 2)
    add_and_print(3, 3)
    std::io::print("7 + 5 = ")
    std::io::println(std::int::int_to_string(add_5(7)))
}

fn always_3() -> Uint64 {
    3
}

fn add_5(value: Uint64) -> Uint64 {
    std::int::int_add(value, 5)
}

fn greet(name: String) {
    join2("Hello", name)
    std::io::print("!")
    std::io::println("")
}

fn join(a: String, b: String) {
    std::io::print(a)
    std::io::print(", ")
    std::io::print(b)
}

fn add_and_print(a: Uint64, b: Uint64) {
    std::io::print(std::int::int_to_string(a))
    std::io::print(" + ")
    std::io::print(std::int::int_to_string(b))
    std::io::print(" = ")
    std::io::print(std::int::int_to_string(std::int::int_add(a, b)))
    std::io::println("")
}

mod foo {
    fn do_foo() {
        std::io::println("Hello from `foo`")
    }

    mod bar {
        fn do_bar() {
            std::io::println("Hello from `bar`")
        }
    }
}
